import os
import copy
import time
import json
import uuid
import socket
import shutil
import vsource
import requests
import traceback
import threading
import numpy as np

from urllib.request import urlopen

import vsource_configs

{IMPORT_LINES}

def get_ip(dns='8.8.8.8', port=80):
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect((dns, port))
        ip = s.getsockname()[0]
    finally:
        s.close()
    return ip

class Service:
    def __init__(self):
        self.storage_host = vsource_configs.app_storage_host
        self.algorithm_name = vsource_configs.app_algorithm_full_name
        self.ask_data_url = vsource_configs.ask_data_url
        self.return_ans_url = vsource_configs.return_ans_url
        self.login_username = vsource_configs.app_login_username
        self.login_password = vsource_configs.app_login_password
        self.return_error_url = vsource_configs.return_err_url

    def read_file(self, path):
        # /get_files/<namespace>/<user>/<timestamp>/<filename>
        file_url =  self.storage_host + '/get_files/' + path
        dir_path = os.path.dirname(os.path.join('tmp', path))
        if not os.path.exists(dir_path):
            os.makedirs(dir_path)
        file_bytes = urlopen(file_url).read()
        with open(os.path.join('tmp', path), 'wb') as f:
            f.write(file_bytes)
        return os.path.join('tmp', path)

    def write_file(self, path):
        filename = os.path.split(path)[-1]
        upload_url = self.storage_host + '/upload_files' + '/{ALGORITHM_NAME}/{ALGORITHM_VERSION}'
        with open(path, 'rb') as f:
            files = {'file': (filename, f.read())}
        response =  requests.post(upload_url, files=files)
        return json.loads(response.content)['return_path']

    def function(self, info_dict):
        try:
{FUNCTION_LINES}
        except Exception as e:
            traceback.print_exc()
            return -1


    def start(self):
        print('[Calculator Init]', self.algorithm_name, 'Service Starting...')
        time.sleep(vsource_configs.sleep_interval)
        vsource.login(self.login_username, self.login_password)
        headers = {'Cookie': vsource.loginInstance.login_instance.cookie}
        print('[Calculator Init]', self.algorithm_name, 'Init Successfully!')
        while True:
            try:
                from_ip = ""
                if vsource_configs.app_env_ip is not None:
                    from_ip = vsource_configs.app_env_ip
                else:
                    from_ip = get_ip()

                vsource.login(self.login_username, self.login_password)
                headers = {'Cookie': vsource.loginInstance.login_instance.cookie}

                ask_for_data_param = {'from_ip': from_ip}
                ask_for_data_resp = requests.get(self.ask_data_url, params=ask_for_data_param, headers=headers)
                ask_for_data_dict = json.loads(ask_for_data_resp.content)
                if ask_for_data_dict['status'] == 201:
                    time.sleep(vsource_configs.call_interval)
                    continue
                assert ask_for_data_dict['status'] == 200
                input_params = ask_for_data_dict['result']
                try:
                    result = self.function(input_params)
                    if result == -1:
                        err_msg = self.algorithm_name.lower() + "Service Error."
                        raise Exception(err_msg)

                    ans = copy.deepcopy(input_params)
                    ans['status'] = 'finished'
                    ans['result'] = result
                    ans_str = json.dumps(ans)

                    return_ans_param = {'out': ans_str}
                    return_ans_resp  = requests.post(self.return_ans_url, data=return_ans_param, headers=headers)
                    return_ans_dict  = json.loads(return_ans_resp.content)

                    if return_ans_dict['status'] != 200:
                        err_msg = self.algorithm_name.lower() + "Service Result Return Error."
                        raise Exception(err_msg)
                except Exception as e:
                    return_error_param = {'err_msg': json.dumps(input_params)}
                    return_error_resp  = requests.post(self.return_error_url, data=return_error_param, headers=headers)
                if os.path.exists('tmp'):
                    shutil.rmtree('tmp')
            except Exception as e:
                traceback.print_exc()
                time.sleep(vsource_configs.call_interval)
                continue


if __name__ == '__main__':
    service = Service()
    service.start()
